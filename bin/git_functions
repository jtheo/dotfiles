#!/bin/bash

function parse_git_branch() {
  git branch 2> /dev/null | awk '$0 ~/^\*/ {print " ("$2")" }'
}

function mainBranch() {
    local br
    read -r -a branches <<< "$(git branch | tr -d '* ' | tr '\n' ' ')"
    for branch in "${branches[@]}"; do
        if [[ ${branch} == "dev" ]]; then
            br="${branch}"
            break
    elif     [[ ${branch} =~ ^(master|main)$ ]]; then
            br="${branch}"
            break
    fi
  done

    if [[ -z ${br} ]]; then
        echo "Can't find a sensible 'main' branch"
        return 1
  fi

    git checkout "${br}"
}

function list_git_branch() {
    for branch in $(git branch -l | tr -d '*'); do
        printf "%-15s %-120s\n" "${branch}" "$(git show --oneline --pretty='format:%h %at %ai %cn %s' "${branch}" -- | head -1)"
  done   | sort -nr -k3
}

function git_remove_branch() {
    local curBranch
    curBranch=$(git rev-parse --abbrev-ref HEAD)

    if [[ ! ${curBranch} =~ (master|dev|main) ]]; then
        echo "Current Branch invalid: > ${curBranch} <"
        return
  fi

    # https://stackoverflow.com/a/56026209
    # https://github.com/not-an-aardvark/git-delete-squashed

    delete=false

    case ${1} in
        -f) delete=true ;;
        -e) empty=true ;;
        -t) delete=true; empty=true ;;
        *)  echo "  ${FUNCNAME[0]} -f (force delete merged branches) -e (remove empty branches) -t (delete merged and empty)" ;;
  esac

    while read -r branch; do
        if ! mergeBase=$(git merge-base "${curBranch}" "${branch}"); then
            echo "Failed git merge-base"
            return
    fi
        treeObj=$(git rev-parse "${branch}^{tree}")
        commitObj=$(git commit-tree "${treeObj}" -p "${mergeBase}" -m _)
        findCommitToBeApplied=$(git cherry "${curBranch}" "${commitObj}")

        if [[ ${findCommitToBeApplied} == "-"* ]]; then
            if ${delete}; then
                git branch -D "${branch}"
      else
                echo "${branch} is merged into ${curBranch} and can be deleted"
      fi
    fi
  done   < <(git checkout -q "${curBranch}" && git for-each-ref refs/heads/ "--format=%(refname:short)" | grep -vE 'master|dev')

    if ${empty}; then
        git br | grep -vF '*' | xargs -IX git br -d X 2> /dev/null
  fi
}

function git_lookup() {
    if [[ -z ${1} ]]; then
        echo "I need something to look for, for example 'deployed_git_sha'"
        return 1
  fi
    if [[ -z ${2} ]]; then
        echo "I need to know where to look, for example accounts/yourmd-dev/nginx-proxy.us-west-2.tfvars"
        return 1
  fi
    limit=${3:-10}
    look=${1}
    where=${2}
    count=0

    git log -G "${look}" --format=%h -- "${where}" | while read -r sha; do

        # shellcheck disable=SC2034
        git --no-pager grep -e "${look}" "${sha}" -- "${where}" | while read -r sha_file nope nope tag; do
            sha=${sha_file%%:*}
            log=$(git log "${sha}" --pretty=oneline --color --graph --decorate --pretty='format:%Cred%h%Creset %Cgreen%ai%Creset' -n1)
            echo "- ${log} => ${tag}"

    done
        count=$((count + 1))
        [[ ${count} -eq ${limit} ]] && return
  done
}

# export -f parse_git_branch
